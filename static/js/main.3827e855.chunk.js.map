{"version":3,"sources":["Tab.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","width","overflowX","table","minWidth","Tab","data","classes","rows","console","log","forEach","e","id","distance","time","speed","stops","push","label","travelTime","length","Paper","className","Table","size","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","row","key","component","scope","datas","trajectoires","element","index","points","_","orderBy","x","y","oldx","oldy","i","Math","abs","sqrt","pow","datasets","fill","showLine","borderColor","colors","options","tooltips","callbacks","tooltipItem","datasetIndex","xLabel","yLabel","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3827e855.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: \"100%\",\r\n    overflowX: \"auto\"\r\n  },\r\n  table: {\r\n    minWidth: 650\r\n  }\r\n});\r\n\r\nfunction createData(id, distance, time, speed, stops) {\r\n  return { id, distance, time, speed, stops };\r\n}\r\n\r\nfunction Tab({data}) {\r\n  const classes = useStyles();\r\n\r\n  const rows = [];\r\n  console.log(data)\r\n  data.forEach(e => {\r\n    rows.push(createData(e.label, e.distance, e.travelTime, e.speed, e.data.length))\r\n  });\r\n\r\n  return (\r\n    <Paper className={classes.root}>\r\n      <Table className={classes.table} size=\"small\" aria-label=\"table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Id</TableCell>\r\n            <TableCell align=\"right\">Distance</TableCell>\r\n            <TableCell align=\"right\">Time</TableCell>\r\n            <TableCell align=\"right\">Speed</TableCell>\r\n            <TableCell align=\"right\">Stops</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {rows.map(row => (\r\n            <TableRow key={row.id}>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                {row.id}\r\n              </TableCell>\r\n              <TableCell align=\"right\">{row.distance}</TableCell>\r\n              <TableCell align=\"right\">{row.time}</TableCell>\r\n              <TableCell align=\"right\">{row.speed}</TableCell>\r\n              <TableCell align=\"right\">{row.stops}</TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </Paper>\r\n  );\r\n}\r\n\r\nexport default Tab;\r\n","import React from 'react';\nimport './App.css';\nimport { Scatter } from 'react-chartjs-2';\nimport trajectoires from './trajectoires.json';\nimport colors from './colors.json';\nimport _ from 'lodash';\nimport Tab from './Tab';\n\nconst datas = {\"datasets\" : []};\n\ntrajectoires.forEach((element,index) => {\n  const points = _.orderBy(element.points, ['time']);\n  \n  let x = 0;\n  let y = 0;\n  let oldx = 0;\n  let oldy = 0;\n  let distance = 0;\n  let travelTime = 0;\n  let speed = 0;\n  let data = [];\n\n  for(let i = 0; i < points.length; i++){\n    x = x + Math.abs(points[i].x - oldx);\n    y = y + Math.abs(points[i].y - oldy);\n    oldx = points[i].x;\n    oldy = points[i].y;\n    data.push(points[i])\n  }\n\n  travelTime = points[points.length-1].time - points[0].time;\n  distance = Math.sqrt(Math.pow(x,2)+Math.pow(y,2));\n  speed = distance / travelTime;\n  datas.datasets.push({\n    label: element.id,\n    fill: false,\n    showLine: true,\n    borderColor: colors[index],\n    data: data,\n    speed: speed,\n    travelTime: travelTime,\n    distance: distance\n  })\n});\n\nconst options = {\n   tooltips: {\n      callbacks: {\n         label: function(tooltipItem, data) {\n            let time = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].time;\n            return 'time: ' + time + ', coordonates: (' + tooltipItem.xLabel + ', ' + tooltipItem.yLabel + ')';\n         }\n      }\n   }\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <Scatter data={datas} options={options} />\n        <Tab data={datas.datasets} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}